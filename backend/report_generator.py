"""
report_generator.py - Generate PDF reports for LoanWatch

This module provides functions to generate PDF reports for compliance data.
"""

from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
import io
import datetime

def generate_compliance_report(compliance_data, report_content):
    """
    Generate a PDF compliance report.
    
    Args:
        compliance_data (dict): Compliance data
        report_content (str): Report content generated by Groq
        
    Returns:
        bytes: PDF file as bytes
    """
    # Create a file-like buffer to receive PDF data
    buffer = io.BytesIO()
    
    # Create the PDF object using the buffer as its "file"
    doc = SimpleDocTemplate(buffer, pagesize=letter, title="LoanWatch Compliance Report")
    
    # Create styles
    styles = getSampleStyleSheet()
    title_style = styles['Title']
    heading1_style = styles['Heading1']
    heading2_style = styles['Heading2']
    normal_style = styles['Normal']
    
    # Create custom styles
    header_style = ParagraphStyle(
        'Header',
        parent=normal_style,
        fontName='Helvetica-Bold',
        fontSize=8,
        textColor=colors.gray
    )
    
    # Create content
    content = []
    
    # Add title and date
    content.append(Paragraph("LoanWatch Compliance Report", title_style))
    content.append(Spacer(1, 12))
    
    # Add date
    today = datetime.datetime.now().strftime("%B %d, %Y")
    content.append(Paragraph(f"Generated on: {today}", normal_style))
    content.append(Spacer(1, 24))
    
    # Add summary table
    data = [
        ['Regulation', 'Score', 'Status'],
        ['ECOA', f"{compliance_data.get('ecoa', {}).get('overallScore', 'N/A')}%", compliance_data.get('ecoa', {}).get('overallStatus', 'N/A')],
        ['FHA', f"{compliance_data.get('fha', {}).get('overallScore', 'N/A')}%", compliance_data.get('fha', {}).get('overallStatus', 'N/A')],
        ['FCRA', f"{compliance_data.get('fcra', {}).get('overallScore', 'N/A')}%", compliance_data.get('fcra', {}).get('overallStatus', 'N/A')]
    ]
    
    table = Table(data, colWidths=[200, 100, 150])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(table)
    content.append(Spacer(1, 24))
    
    # Add report content
    for line in report_content.split('\n'):
        if line.strip():
            if line.startswith('# '):
                # Heading 1
                content.append(Paragraph(line[2:], heading1_style))
                content.append(Spacer(1, 12))
            elif line.startswith('## '):
                # Heading 2
                content.append(Paragraph(line[3:], heading2_style))
                content.append(Spacer(1, 8))
            elif line.startswith('### '):
                # Heading 3
                content.append(Paragraph(line[4:], styles['Heading3']))
                content.append(Spacer(1, 6))
            else:
                # Normal text
                content.append(Paragraph(line, normal_style))
                content.append(Spacer(1, 6))
    
    # Add footer
    content.append(Spacer(1, 24))
    content.append(Paragraph("CONFIDENTIAL - FOR INTERNAL USE ONLY", header_style))
    content.append(Paragraph("LoanWatch Compliance System", header_style))
    
    # Build the PDF
    doc.build(content)
    
    # Get the value of the BytesIO buffer
    pdf = buffer.getvalue()
    buffer.close()
    
    return pdf
